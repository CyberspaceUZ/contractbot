name: production-deploy

on:
  pull_request:
    branches:
      - production
  push:
    branches:
      - production

jobs:
  health-check-job:
    runs-on: ubuntu-latest
    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/github-actions
      BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: github-actions
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Cache dependency
        uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Setup python environment
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Check Python version
        run: python --version
      - name: Install requirements
        run: pip install -r requirements.txt
      - name: Check Syntax
        run: pycodestyle --statistics .
      - name: Run Migrations
        run: python manage.py migrate
      - name: Run Test
        run: python manage.py test

  package-job:
    name: Package job
    runs-on: ubuntu-latest
    needs: [health-check-job]

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: ${{ github.event.repository.name }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        aws ecr describe-repositories --repository-names $ECR_REPOSITORY || aws ecr create-repository --repository-name $ECR_REPOSITORY
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy:
    runs-on: ubuntu-latest
    needs: [package-job]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Set Repo Location
        id: repo
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
        run: echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Check Repo Location
        run: echo ${{ steps.repo.outputs.repo_name }}
      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
      - name: Connect to kubernetes cluster
        run: |
          aws eks --region us-east-1 update-kubeconfig --name small-cbc
      - name: Helm Deploy
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ github.event.repository.name }}
          IMAGE_TAG: ${{ github.sha }}
          HOST: ${{ secrets.HOST }}
        run: >
          helm upgrade
          --namespace=${{ github.event.repository.name }}
          --install
          --set image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          --set database_url=${{ secrets.DATABASE_URL }}
          --set bot_token=${{ secrets.BOT_TOKEN }}
          --set bot_webhook_url=${{ secrets.BOT_WEBHOOK_URL }}
          --set aws_access_key_id=${{ secrets.AWS_S3_ACCESS_KEY_ID }}
          --set aws_secret_access_key=${{ secrets.AWS_S3_SECRET_ACCESS_KEY }}
          --set aws_storage_bucket_name=${{ secrets.AWS_STORAGE_BUCKET_NAME }}
          --set aws_storage_bucket_name=${{ secrets.AWS_MEDIA_BUCKET_NAME }}
          --set ingress.host=$HOST
          --wait
          --atomic
          ${{ github.event.repository.name }}
          ./k8s
      - name: Check pods
        run: kubectl get pods --namespace=${{ github.event.repository.name }}

